{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Typography,\n//   Button,\n//   TextField,\n//   Card,\n//   CardContent,\n//   Grid,\n//   Chip,\n//   IconButton,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   Pagination,\n//   Avatar,\n//   Tooltip,\n//   Accordion,\n//   AccordionSummary,\n//   AccordionDetails,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   Divider,\n//   CircularProgress\n// } from '@mui/material';\n// import {\n//   Add as AddIcon,\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n//   Visibility as ViewIcon,\n//   Search as SearchIcon,\n//   FilterList as FilterIcon,\n//   Person as PersonIcon,\n//   Phone as PhoneIcon,\n//   Email as EmailIcon,\n//   LocationOn as LocationIcon,\n//   MedicalServices as MedicalIcon,\n//   ExpandMore as ExpandMoreIcon,\n//   Add as AddTreatmentIcon\n// } from '@mui/icons-material';\n// import { useNavigate } from 'react-router-dom';\n// import apiService from '../services/api';\n// import Snackbar from '@mui/material/Snackbar';\n// import Alert from '@mui/material/Alert';\n\n// function getAge(dateOfBirth) {\n//   if (!dateOfBirth) return 'N/A';\n//   const dob = new Date(dateOfBirth);\n//   const diffMs = Date.now() - dob.getTime();\n//   const ageDt = new Date(diffMs);\n//   return Math.abs(ageDt.getUTCFullYear() - 1970);\n// }\n\n// function Patients() {\n//   const [patients, setPatients] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [statusFilter, setStatusFilter] = useState('');\n//   const [page, setPage] = useState(1);\n//   const [totalPages, setTotalPages] = useState(1);\n//   const [selectedPatient, setSelectedPatient] = useState(null);\n//   const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n//   const [openDialog, setOpenDialog] = useState(false);\n//   const [editingPatient, setEditingPatient] = useState(null);\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     email: '',\n//     phone: '',\n//     dateOfBirth: '',\n//     gender: '',\n//     address: '',\n//     emergencyContact: '',\n//     medicalHistory: '',\n//     status: 'active'\n//   });\n//   const [visitLoadingId, setVisitLoadingId] = useState(null);\n//   const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     fetchPatients();\n//   }, [page, searchTerm, statusFilter]);\n\n//   const fetchPatients = async () => {\n//     try {\n//       const data = await apiService.getPatients();\n//       setPatients(data);\n//       setTotalPages(Math.ceil(data.length / 10)); // Assuming 10 items per page\n//     } catch (error) {\n//       console.error('Error fetching patients:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       if (editingPatient) {\n//         // Use _id if available (MongoDB), otherwise use id (mock data)\n//         const patientId = editingPatient._id || editingPatient.id;\n//         await apiService.updatePatient(patientId, formData);\n//       } else {\n//         await apiService.createPatient(formData);\n//       }\n\n//       setOpenDialog(false);\n//       setEditingPatient(null);\n//       resetForm();\n//       fetchPatients();\n//     } catch (error) {\n//       console.error('Error saving patient:', error);\n//     }\n//   };\n\n//   const handleDelete = async () => {\n//     if (window.confirm('Are you sure you want to delete this patient?')) {\n//       try {\n//         // Use _id if available (MongoDB), otherwise use id (mock data)\n//         const patientId = selectedPatient._id || selectedPatient.id;\n//         await apiService.deletePatient(patientId);\n//         setDeleteDialogOpen(false);\n//         setSelectedPatient(null);\n//         fetchPatients();\n//       } catch (error) {\n//         console.error('Error deleting patient:', error);\n//       }\n//     }\n//   };\n\n//   const handleEdit = (patient) => {\n//     setEditingPatient(patient);\n//     setFormData({\n//       name: patient.name,\n//       email: patient.email,\n//       phone: patient.phone,\n//       dateOfBirth: patient.dateOfBirth ? patient.dateOfBirth.split('T')[0] : '',\n//       gender: patient.gender,\n//       address: patient.address,\n//       emergencyContact: patient.emergencyContact,\n//       medicalHistory: patient.medicalHistory,\n//       status: patient.status || 'active'\n//     });\n//     setOpenDialog(true);\n//   };\n\n//   const resetForm = () => {\n//     setFormData({\n//       name: '',\n//       email: '',\n//       phone: '',\n//       dateOfBirth: '',\n//       gender: '',\n//       address: '',\n//       emergencyContact: '',\n//       medicalHistory: '',\n//       status: 'active'\n//     });\n//   };\n\n//   const handleIncrementVisit = async (patient) => {\n//     setVisitLoadingId(patient._id || patient.id);\n//     try {\n//       await apiService.request(`/patients/${patient._id || patient.id}/treatments`, {\n//         method: 'POST',\n//         body: JSON.stringify({\n//           doctorId: '', // Optional: can be filled if you want to associate a doctor\n//           diagnosis: 'General Visit',\n//           treatment: 'Visit recorded',\n//           notes: 'Visit incremented from patient list.'\n//         }),\n//       });\n//       setSnackbar({ open: true, message: 'Visit count incremented!', severity: 'success' });\n//       fetchPatients();\n//     } catch (error) {\n//       setSnackbar({ open: true, message: 'Failed to increment visit count.', severity: 'error' });\n//     } finally {\n//       setVisitLoadingId(null);\n//     }\n//   };\n\n//   const filteredPatients = patients.filter(patient => {\n//     const matchesSearch = patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//                          patient.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//                          patient.phone.includes(searchTerm);\n//     const matchesStatus = !statusFilter || patient.status === statusFilter;\n//     return matchesSearch && matchesStatus;\n//   });\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case 'active': return 'success';\n//       case 'inactive': return 'error';\n//       case 'pending': return 'warning';\n//       default: return 'default';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     return new Date(dateString).toLocaleDateString();\n//   };\n\n//   const getInitials = (name) => {\n//     return name\n//       .split(' ')\n//       .map(word => word[0])\n//       .join('')\n//       .toUpperCase()\n//       .slice(0, 2);\n//   };\n\n//   return (\n//     <Box>\n//       <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n//         <Typography variant=\"h4\">Patients</Typography>\n//         <Button\n//           variant=\"contained\"\n//           startIcon={<AddIcon />}\n//           onClick={() => setOpenDialog(true)}\n//         >\n//           Add New Patient\n//         </Button>\n//       </Box>\n\n//       {/* Search and Filters */}\n//       <Card sx={{ mb: 3 }}>\n//         <CardContent>\n//           <Grid container spacing={2} alignItems=\"center\">\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 fullWidth\n//                 placeholder=\"Search patients by name, phone, or email...\"\n//                 value={searchTerm}\n//                 onChange={(e) => setSearchTerm(e.target.value)}\n//                 InputProps={{\n//                   startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />,\n//                 }}\n//               />\n//             </Grid>\n//             <Grid item xs={12} md={3}>\n//               <FormControl fullWidth>\n//                 <InputLabel>Status</InputLabel>\n//                 <Select\n//                   value={statusFilter}\n//                   label=\"Status\"\n//                   onChange={(e) => setStatusFilter(e.target.value)}\n//                 >\n//                   <MenuItem value=\"\">All</MenuItem>\n//                   <MenuItem value=\"active\">Active</MenuItem>\n//                   <MenuItem value=\"inactive\">Inactive</MenuItem>\n//                   <MenuItem value=\"pending\">Pending</MenuItem>\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//             <Grid item xs={12} md={3}>\n//               <Button\n//                 fullWidth\n//                 variant=\"outlined\"\n//                 startIcon={<FilterIcon />}\n//                 onClick={() => {\n//                   setSearchTerm('');\n//                   setStatusFilter('');\n//                 }}\n//               >\n//                 Clear Filters\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </CardContent>\n//       </Card>\n\n//       {/* Patients Table */}\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>S.No</TableCell>\n//               <TableCell>Patient</TableCell>\n//               <TableCell>Age/Gender</TableCell>\n//               <TableCell>Contact</TableCell>\n//               <TableCell>Visit Count</TableCell>\n//               <TableCell>Last Visit</TableCell>\n//               <TableCell>Status</TableCell>\n//               <TableCell>Actions</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {filteredPatients.map((patient, index) => (\n//               <TableRow key={patient._id || patient.id} hover>\n//                 <TableCell>\n//                   <Typography variant=\"body2\" fontWeight=\"bold\">\n//                     #{index + 1}\n//                   </Typography>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Box display=\"flex\" alignItems=\"center\">\n//                     <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n//                       <PersonIcon />\n//                     </Avatar>\n//                     <Box>\n//                       <Typography variant=\"subtitle2\">{patient.name}</Typography>\n//                       <Typography variant=\"body2\" color=\"textSecondary\">\n//                         {patient.email}\n//                       </Typography>\n//                     </Box>\n//                   </Box>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Typography variant=\"body2\">\n//                     {patient.dateOfBirth ? `${getAge(patient.dateOfBirth)} yrs` : 'N/A'} • {patient.gender || 'N/A'}\n//                   </Typography>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Box>\n//                     <Box display=\"flex\" alignItems=\"center\" mb={0.5}>\n//                       <EmailIcon sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n//                       <Typography variant=\"body2\">{patient.email}</Typography>\n//                     </Box>\n//                     <Box display=\"flex\" alignItems=\"center\">\n//                       <PhoneIcon sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n//                       <Typography variant=\"body2\">{patient.phone}</Typography>\n//                     </Box>\n//                   </Box>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Chip\n//                     label={patient.visitCount || 0}\n//                     size=\"small\"\n//                     color=\"primary\"\n//                     variant=\"outlined\"\n//                   />\n//                   <Button\n//                     size=\"small\"\n//                     variant=\"contained\"\n//                     color=\"success\"\n//                     sx={{ ml: 1, minWidth: 0, px: 1 }}\n//                     onClick={() => handleIncrementVisit(patient)}\n//                     disabled={visitLoadingId === (patient._id || patient.id)}\n//                   >\n//                     {visitLoadingId === (patient._id || patient.id) ? <CircularProgress size={18} color=\"inherit\" /> : '+'}\n//                   </Button>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Typography variant=\"body2\">\n//                     {patient.lastVisit ? formatDate(patient.lastVisit) : 'Never'}\n//                   </Typography>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Chip\n//                     label={patient.status || 'active'}\n//                     size=\"small\"\n//                     color={getStatusColor(patient.status || 'active')}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <Box display=\"flex\" gap={1}>\n//                     <Tooltip title=\"View Details\">\n//                       <IconButton\n//                         size=\"small\"\n//                         onClick={() => navigate(`/patients/${patient._id || patient.id}`)}\n//                       >\n//                         <ViewIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                     <Tooltip title=\"Edit Patient\">\n//                       <IconButton\n//                         size=\"small\"\n//                         onClick={() => handleEdit(patient)}\n//                       >\n//                         <EditIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                     <Tooltip title=\"Delete Patient\">\n//                       <IconButton\n//                         size=\"small\"\n//                         color=\"error\"\n//                         onClick={() => {\n//                           setSelectedPatient(patient);\n//                           setDeleteDialogOpen(true);\n//                         }}\n//                       >\n//                         <DeleteIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                   </Box>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Pagination */}\n//       {totalPages > 1 && (\n//         <Box display=\"flex\" justifyContent=\"center\" mt={3}>\n//           <Pagination\n//             count={totalPages}\n//             page={page}\n//             onChange={(e, value) => setPage(value)}\n//             color=\"primary\"\n//           />\n//         </Box>\n//       )}\n\n//       {/* Delete Confirmation Dialog */}\n//       <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n//         <DialogTitle>Delete Patient</DialogTitle>\n//         <DialogContent>\n//           <Typography>\n//             Are you sure you want to delete {selectedPatient?.name}? This action cannot be undone.\n//           </Typography>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n//           <Button onClick={handleDelete} color=\"error\" variant=\"contained\">\n//             Delete\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n\n//       {/* Add/Edit Dialog */}\n//       <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"md\" fullWidth>\n//         <DialogTitle>\n//           {editingPatient ? 'Edit Patient' : 'Add New Patient'}\n//         </DialogTitle>\n//         <form onSubmit={handleSubmit}>\n//           <DialogContent>\n//             <Grid container spacing={2}>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Full Name\"\n//                   value={formData.name}\n//                   onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n//                   required\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Email\"\n//                   type=\"email\"\n//                   value={formData.email}\n//                   onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n//                   required\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Phone\"\n//                   value={formData.phone}\n//                   onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n//                   required\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Date of Birth\"\n//                   type=\"date\"\n//                   value={formData.dateOfBirth}\n//                   onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}\n//                   InputLabelProps={{ shrink: true }}\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <FormControl fullWidth>\n//                   <InputLabel>Gender</InputLabel>\n//                   <Select\n//                     value={formData.gender}\n//                     onChange={(e) => setFormData({ ...formData, gender: e.target.value })}\n//                     label=\"Gender\"\n//                   >\n//                     <MenuItem value=\"male\">Male</MenuItem>\n//                     <MenuItem value=\"female\">Female</MenuItem>\n//                     <MenuItem value=\"other\">Other</MenuItem>\n//                   </Select>\n//                 </FormControl>\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <FormControl fullWidth required>\n//                   <InputLabel>Status</InputLabel>\n//                   <Select\n//                     value={formData.status}\n//                     onChange={(e) => setFormData({ ...formData, status: e.target.value })}\n//                     label=\"Status\"\n//                   >\n//                     <MenuItem value=\"active\">Active</MenuItem>\n//                     <MenuItem value=\"inactive\">Inactive</MenuItem>\n//                     <MenuItem value=\"pending\">Pending</MenuItem>\n//                   </Select>\n//                 </FormControl>\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Address\"\n//                   value={formData.address}\n//                   onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n//                   multiline\n//                   rows={2}\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Emergency Contact\"\n//                   value={formData.emergencyContact}\n//                   onChange={(e) => setFormData({ ...formData, emergencyContact: e.target.value })}\n//                 />\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Medical History\"\n//                   value={formData.medicalHistory}\n//                   onChange={(e) => setFormData({ ...formData, medicalHistory: e.target.value })}\n//                   multiline\n//                   rows={3}\n//                 />\n//               </Grid>\n//             </Grid>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\n//             <Button type=\"submit\" variant=\"contained\">\n//               {editingPatient ? 'Update' : 'Add'} Patient\n//             </Button>\n//           </DialogActions>\n//         </form>\n//       </Dialog>\n//     </Box>\n//   );\n// }\n\n// export default Patients;","map":{"version":3,"names":[],"sources":["C:/Users/ASUS/Pictures/Screenshots/vs code/patient-requisition-full-app/frontend/src/pages/Patients.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Typography,\n//   Button,\n//   TextField,\n//   Card,\n//   CardContent,\n//   Grid,\n//   Chip,\n//   IconButton,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   Pagination,\n//   Avatar,\n//   Tooltip,\n//   Accordion,\n//   AccordionSummary,\n//   AccordionDetails,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   Divider,\n//   CircularProgress\n// } from '@mui/material';\n// import {\n//   Add as AddIcon,\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n//   Visibility as ViewIcon,\n//   Search as SearchIcon,\n//   FilterList as FilterIcon,\n//   Person as PersonIcon,\n//   Phone as PhoneIcon,\n//   Email as EmailIcon,\n//   LocationOn as LocationIcon,\n//   MedicalServices as MedicalIcon,\n//   ExpandMore as ExpandMoreIcon,\n//   Add as AddTreatmentIcon\n// } from '@mui/icons-material';\n// import { useNavigate } from 'react-router-dom';\n// import apiService from '../services/api';\n// import Snackbar from '@mui/material/Snackbar';\n// import Alert from '@mui/material/Alert';\n\n// function getAge(dateOfBirth) {\n//   if (!dateOfBirth) return 'N/A';\n//   const dob = new Date(dateOfBirth);\n//   const diffMs = Date.now() - dob.getTime();\n//   const ageDt = new Date(diffMs);\n//   return Math.abs(ageDt.getUTCFullYear() - 1970);\n// }\n\n// function Patients() {\n//   const [patients, setPatients] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [statusFilter, setStatusFilter] = useState('');\n//   const [page, setPage] = useState(1);\n//   const [totalPages, setTotalPages] = useState(1);\n//   const [selectedPatient, setSelectedPatient] = useState(null);\n//   const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n//   const [openDialog, setOpenDialog] = useState(false);\n//   const [editingPatient, setEditingPatient] = useState(null);\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     email: '',\n//     phone: '',\n//     dateOfBirth: '',\n//     gender: '',\n//     address: '',\n//     emergencyContact: '',\n//     medicalHistory: '',\n//     status: 'active'\n//   });\n//   const [visitLoadingId, setVisitLoadingId] = useState(null);\n//   const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     fetchPatients();\n//   }, [page, searchTerm, statusFilter]);\n\n//   const fetchPatients = async () => {\n//     try {\n//       const data = await apiService.getPatients();\n//       setPatients(data);\n//       setTotalPages(Math.ceil(data.length / 10)); // Assuming 10 items per page\n//     } catch (error) {\n//       console.error('Error fetching patients:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       if (editingPatient) {\n//         // Use _id if available (MongoDB), otherwise use id (mock data)\n//         const patientId = editingPatient._id || editingPatient.id;\n//         await apiService.updatePatient(patientId, formData);\n//       } else {\n//         await apiService.createPatient(formData);\n//       }\n      \n//       setOpenDialog(false);\n//       setEditingPatient(null);\n//       resetForm();\n//       fetchPatients();\n//     } catch (error) {\n//       console.error('Error saving patient:', error);\n//     }\n//   };\n\n//   const handleDelete = async () => {\n//     if (window.confirm('Are you sure you want to delete this patient?')) {\n//       try {\n//         // Use _id if available (MongoDB), otherwise use id (mock data)\n//         const patientId = selectedPatient._id || selectedPatient.id;\n//         await apiService.deletePatient(patientId);\n//         setDeleteDialogOpen(false);\n//         setSelectedPatient(null);\n//         fetchPatients();\n//       } catch (error) {\n//         console.error('Error deleting patient:', error);\n//       }\n//     }\n//   };\n\n//   const handleEdit = (patient) => {\n//     setEditingPatient(patient);\n//     setFormData({\n//       name: patient.name,\n//       email: patient.email,\n//       phone: patient.phone,\n//       dateOfBirth: patient.dateOfBirth ? patient.dateOfBirth.split('T')[0] : '',\n//       gender: patient.gender,\n//       address: patient.address,\n//       emergencyContact: patient.emergencyContact,\n//       medicalHistory: patient.medicalHistory,\n//       status: patient.status || 'active'\n//     });\n//     setOpenDialog(true);\n//   };\n\n//   const resetForm = () => {\n//     setFormData({\n//       name: '',\n//       email: '',\n//       phone: '',\n//       dateOfBirth: '',\n//       gender: '',\n//       address: '',\n//       emergencyContact: '',\n//       medicalHistory: '',\n//       status: 'active'\n//     });\n//   };\n\n//   const handleIncrementVisit = async (patient) => {\n//     setVisitLoadingId(patient._id || patient.id);\n//     try {\n//       await apiService.request(`/patients/${patient._id || patient.id}/treatments`, {\n//         method: 'POST',\n//         body: JSON.stringify({\n//           doctorId: '', // Optional: can be filled if you want to associate a doctor\n//           diagnosis: 'General Visit',\n//           treatment: 'Visit recorded',\n//           notes: 'Visit incremented from patient list.'\n//         }),\n//       });\n//       setSnackbar({ open: true, message: 'Visit count incremented!', severity: 'success' });\n//       fetchPatients();\n//     } catch (error) {\n//       setSnackbar({ open: true, message: 'Failed to increment visit count.', severity: 'error' });\n//     } finally {\n//       setVisitLoadingId(null);\n//     }\n//   };\n\n//   const filteredPatients = patients.filter(patient => {\n//     const matchesSearch = patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//                          patient.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//                          patient.phone.includes(searchTerm);\n//     const matchesStatus = !statusFilter || patient.status === statusFilter;\n//     return matchesSearch && matchesStatus;\n//   });\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case 'active': return 'success';\n//       case 'inactive': return 'error';\n//       case 'pending': return 'warning';\n//       default: return 'default';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     return new Date(dateString).toLocaleDateString();\n//   };\n\n//   const getInitials = (name) => {\n//     return name\n//       .split(' ')\n//       .map(word => word[0])\n//       .join('')\n//       .toUpperCase()\n//       .slice(0, 2);\n//   };\n\n//   return (\n//     <Box>\n//       <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n//         <Typography variant=\"h4\">Patients</Typography>\n//         <Button\n//           variant=\"contained\"\n//           startIcon={<AddIcon />}\n//           onClick={() => setOpenDialog(true)}\n//         >\n//           Add New Patient\n//         </Button>\n//       </Box>\n\n//       {/* Search and Filters */}\n//       <Card sx={{ mb: 3 }}>\n//         <CardContent>\n//           <Grid container spacing={2} alignItems=\"center\">\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 fullWidth\n//                 placeholder=\"Search patients by name, phone, or email...\"\n//                 value={searchTerm}\n//                 onChange={(e) => setSearchTerm(e.target.value)}\n//                 InputProps={{\n//                   startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />,\n//                 }}\n//               />\n//             </Grid>\n//             <Grid item xs={12} md={3}>\n//               <FormControl fullWidth>\n//                 <InputLabel>Status</InputLabel>\n//                 <Select\n//                   value={statusFilter}\n//                   label=\"Status\"\n//                   onChange={(e) => setStatusFilter(e.target.value)}\n//                 >\n//                   <MenuItem value=\"\">All</MenuItem>\n//                   <MenuItem value=\"active\">Active</MenuItem>\n//                   <MenuItem value=\"inactive\">Inactive</MenuItem>\n//                   <MenuItem value=\"pending\">Pending</MenuItem>\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//             <Grid item xs={12} md={3}>\n//               <Button\n//                 fullWidth\n//                 variant=\"outlined\"\n//                 startIcon={<FilterIcon />}\n//                 onClick={() => {\n//                   setSearchTerm('');\n//                   setStatusFilter('');\n//                 }}\n//               >\n//                 Clear Filters\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </CardContent>\n//       </Card>\n\n//       {/* Patients Table */}\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>S.No</TableCell>\n//               <TableCell>Patient</TableCell>\n//               <TableCell>Age/Gender</TableCell>\n//               <TableCell>Contact</TableCell>\n//               <TableCell>Visit Count</TableCell>\n//               <TableCell>Last Visit</TableCell>\n//               <TableCell>Status</TableCell>\n//               <TableCell>Actions</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {filteredPatients.map((patient, index) => (\n//               <TableRow key={patient._id || patient.id} hover>\n//                 <TableCell>\n//                   <Typography variant=\"body2\" fontWeight=\"bold\">\n//                     #{index + 1}\n//                   </Typography>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Box display=\"flex\" alignItems=\"center\">\n//                     <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n//                       <PersonIcon />\n//                     </Avatar>\n//                     <Box>\n//                       <Typography variant=\"subtitle2\">{patient.name}</Typography>\n//                       <Typography variant=\"body2\" color=\"textSecondary\">\n//                         {patient.email}\n//                       </Typography>\n//                     </Box>\n//                   </Box>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Typography variant=\"body2\">\n//                     {patient.dateOfBirth ? `${getAge(patient.dateOfBirth)} yrs` : 'N/A'} • {patient.gender || 'N/A'}\n//                   </Typography>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Box>\n//                     <Box display=\"flex\" alignItems=\"center\" mb={0.5}>\n//                       <EmailIcon sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n//                       <Typography variant=\"body2\">{patient.email}</Typography>\n//                     </Box>\n//                     <Box display=\"flex\" alignItems=\"center\">\n//                       <PhoneIcon sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n//                       <Typography variant=\"body2\">{patient.phone}</Typography>\n//                     </Box>\n//                   </Box>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Chip\n//                     label={patient.visitCount || 0}\n//                     size=\"small\"\n//                     color=\"primary\"\n//                     variant=\"outlined\"\n//                   />\n//                   <Button\n//                     size=\"small\"\n//                     variant=\"contained\"\n//                     color=\"success\"\n//                     sx={{ ml: 1, minWidth: 0, px: 1 }}\n//                     onClick={() => handleIncrementVisit(patient)}\n//                     disabled={visitLoadingId === (patient._id || patient.id)}\n//                   >\n//                     {visitLoadingId === (patient._id || patient.id) ? <CircularProgress size={18} color=\"inherit\" /> : '+'}\n//                   </Button>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Typography variant=\"body2\">\n//                     {patient.lastVisit ? formatDate(patient.lastVisit) : 'Never'}\n//                   </Typography>\n//                 </TableCell>\n//                 <TableCell>\n//                   <Chip\n//                     label={patient.status || 'active'}\n//                     size=\"small\"\n//                     color={getStatusColor(patient.status || 'active')}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <Box display=\"flex\" gap={1}>\n//                     <Tooltip title=\"View Details\">\n//                       <IconButton\n//                         size=\"small\"\n//                         onClick={() => navigate(`/patients/${patient._id || patient.id}`)}\n//                       >\n//                         <ViewIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                     <Tooltip title=\"Edit Patient\">\n//                       <IconButton\n//                         size=\"small\"\n//                         onClick={() => handleEdit(patient)}\n//                       >\n//                         <EditIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                     <Tooltip title=\"Delete Patient\">\n//                       <IconButton\n//                         size=\"small\"\n//                         color=\"error\"\n//                         onClick={() => {\n//                           setSelectedPatient(patient);\n//                           setDeleteDialogOpen(true);\n//                         }}\n//                       >\n//                         <DeleteIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                   </Box>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Pagination */}\n//       {totalPages > 1 && (\n//         <Box display=\"flex\" justifyContent=\"center\" mt={3}>\n//           <Pagination\n//             count={totalPages}\n//             page={page}\n//             onChange={(e, value) => setPage(value)}\n//             color=\"primary\"\n//           />\n//         </Box>\n//       )}\n\n//       {/* Delete Confirmation Dialog */}\n//       <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n//         <DialogTitle>Delete Patient</DialogTitle>\n//         <DialogContent>\n//           <Typography>\n//             Are you sure you want to delete {selectedPatient?.name}? This action cannot be undone.\n//           </Typography>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n//           <Button onClick={handleDelete} color=\"error\" variant=\"contained\">\n//             Delete\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n\n//       {/* Add/Edit Dialog */}\n//       <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"md\" fullWidth>\n//         <DialogTitle>\n//           {editingPatient ? 'Edit Patient' : 'Add New Patient'}\n//         </DialogTitle>\n//         <form onSubmit={handleSubmit}>\n//           <DialogContent>\n//             <Grid container spacing={2}>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Full Name\"\n//                   value={formData.name}\n//                   onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n//                   required\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Email\"\n//                   type=\"email\"\n//                   value={formData.email}\n//                   onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n//                   required\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Phone\"\n//                   value={formData.phone}\n//                   onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n//                   required\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Date of Birth\"\n//                   type=\"date\"\n//                   value={formData.dateOfBirth}\n//                   onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}\n//                   InputLabelProps={{ shrink: true }}\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <FormControl fullWidth>\n//                   <InputLabel>Gender</InputLabel>\n//                   <Select\n//                     value={formData.gender}\n//                     onChange={(e) => setFormData({ ...formData, gender: e.target.value })}\n//                     label=\"Gender\"\n//                   >\n//                     <MenuItem value=\"male\">Male</MenuItem>\n//                     <MenuItem value=\"female\">Female</MenuItem>\n//                     <MenuItem value=\"other\">Other</MenuItem>\n//                   </Select>\n//                 </FormControl>\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <FormControl fullWidth required>\n//                   <InputLabel>Status</InputLabel>\n//                   <Select\n//                     value={formData.status}\n//                     onChange={(e) => setFormData({ ...formData, status: e.target.value })}\n//                     label=\"Status\"\n//                   >\n//                     <MenuItem value=\"active\">Active</MenuItem>\n//                     <MenuItem value=\"inactive\">Inactive</MenuItem>\n//                     <MenuItem value=\"pending\">Pending</MenuItem>\n//                   </Select>\n//                 </FormControl>\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Address\"\n//                   value={formData.address}\n//                   onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n//                   multiline\n//                   rows={2}\n//                 />\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Emergency Contact\"\n//                   value={formData.emergencyContact}\n//                   onChange={(e) => setFormData({ ...formData, emergencyContact: e.target.value })}\n//                 />\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <TextField\n//                   fullWidth\n//                   label=\"Medical History\"\n//                   value={formData.medicalHistory}\n//                   onChange={(e) => setFormData({ ...formData, medicalHistory: e.target.value })}\n//                   multiline\n//                   rows={3}\n//                 />\n//               </Grid>\n//             </Grid>\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\n//             <Button type=\"submit\" variant=\"contained\">\n//               {editingPatient ? 'Update' : 'Add'} Patient\n//             </Button>\n//           </DialogActions>\n//         </form>\n//       </Dialog>\n//     </Box>\n//   );\n// }\n\n// export default Patients; \n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}