{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  async request(endpoint, options = {}) {\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        ...options\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n  async requestWithFallback(endpoint, mockEndpoint) {\n    try {\n      return await this.request(endpoint);\n    } catch (error) {\n      console.log(`Falling back to mock data for ${endpoint}`);\n      return await this.request(mockEndpoint);\n    }\n  }\n\n  // Patients\n  async getPatients() {\n    return this.requestWithFallback('/patients', '/mock/patients');\n  }\n  async createPatient(patientData) {\n    try {\n      const result = await this.request('/patients', {\n        method: 'POST',\n        body: JSON.stringify(patientData)\n      });\n      // Ensure we have an id field for consistency\n      return {\n        ...result,\n        id: result._id || result.id\n      };\n    } catch (error) {\n      console.error('Failed to create patient via API, using mock response');\n      // Return a mock response for development\n      return {\n        id: Date.now(),\n        ...patientData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n    }\n  }\n  async updatePatient(id, patientData) {\n    try {\n      const result = await this.request(`/patients/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(patientData)\n      });\n      // Ensure we have an id field for consistency\n      return {\n        ...result,\n        id: result._id || result.id\n      };\n    } catch (error) {\n      console.error('Failed to update patient via API, using mock response');\n      // Return a mock response for development\n      return {\n        id: id,\n        ...patientData,\n        updatedAt: new Date().toISOString()\n      };\n    }\n  }\n  async deletePatient(id) {\n    try {\n      return await this.request(`/patients/${id}`, {\n        method: 'DELETE'\n      });\n    } catch (error) {\n      console.error('Failed to delete patient via API, using mock response');\n      // Return a mock response for development\n      return {\n        message: 'Patient deleted successfully'\n      };\n    }\n  }\n\n  // Doctors\n  async getDoctors() {\n    return this.requestWithFallback('/doctors', '/mock/doctors');\n  }\n  async createDoctor(doctorData) {\n    try {\n      return await this.request('/doctors', {\n        method: 'POST',\n        body: JSON.stringify(doctorData)\n      });\n    } catch (error) {\n      console.error('Failed to create doctor via API, using mock response');\n      // Return a mock response for development\n      return {\n        id: Date.now(),\n        ...doctorData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n    }\n  }\n  async updateDoctor(id, doctorData) {\n    try {\n      return await this.request(`/doctors/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(doctorData)\n      });\n    } catch (error) {\n      console.error('Failed to update doctor via API, using mock response');\n      // Return a mock response for development\n      return {\n        id: id,\n        ...doctorData,\n        updatedAt: new Date().toISOString()\n      };\n    }\n  }\n  async deleteDoctor(id) {\n    try {\n      return await this.request(`/doctors/${id}`, {\n        method: 'DELETE'\n      });\n    } catch (error) {\n      console.error('Failed to delete doctor via API, using mock response');\n      // Return a mock response for development\n      return {\n        message: 'Doctor deleted successfully'\n      };\n    }\n  }\n\n  // Analytics\n  async getAnalytics() {\n    return this.requestWithFallback('/analytics', '/mock/analytics');\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.request('/health');\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","request","endpoint","options","response","fetch","headers","ok","Error","status","json","error","console","requestWithFallback","mockEndpoint","log","getPatients","createPatient","patientData","result","method","body","JSON","stringify","id","_id","Date","now","createdAt","toISOString","updatedAt","updatePatient","deletePatient","message","getDoctors","createDoctor","doctorData","updateDoctor","deleteDoctor","getAnalytics","healthCheck"],"sources":["D:/VSCODE D DRIVE/patient-requisition-full-app/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  async request(endpoint, options = {}) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...options.headers,\r\n        },\r\n        ...options,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`API request failed for ${endpoint}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async requestWithFallback(endpoint, mockEndpoint) {\r\n    try {\r\n      return await this.request(endpoint);\r\n    } catch (error) {\r\n      console.log(`Falling back to mock data for ${endpoint}`);\r\n      return await this.request(mockEndpoint);\r\n    }\r\n  }\r\n\r\n  // Patients\r\n  async getPatients() {\r\n    return this.requestWithFallback('/patients', '/mock/patients');\r\n  }\r\n\r\n  async createPatient(patientData) {\r\n    try {\r\n      const result = await this.request('/patients', {\r\n        method: 'POST',\r\n        body: JSON.stringify(patientData),\r\n      });\r\n      // Ensure we have an id field for consistency\r\n      return { ...result, id: result._id || result.id };\r\n    } catch (error) {\r\n      console.error('Failed to create patient via API, using mock response');\r\n      // Return a mock response for development\r\n      return {\r\n        id: Date.now(),\r\n        ...patientData,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  async updatePatient(id, patientData) {\r\n    try {\r\n      const result = await this.request(`/patients/${id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(patientData),\r\n      });\r\n      // Ensure we have an id field for consistency\r\n      return { ...result, id: result._id || result.id };\r\n    } catch (error) {\r\n      console.error('Failed to update patient via API, using mock response');\r\n      // Return a mock response for development\r\n      return {\r\n        id: id,\r\n        ...patientData,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  async deletePatient(id) {\r\n    try {\r\n      return await this.request(`/patients/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to delete patient via API, using mock response');\r\n      // Return a mock response for development\r\n      return { message: 'Patient deleted successfully' };\r\n    }\r\n  }\r\n\r\n  // Doctors\r\n  async getDoctors() {\r\n    return this.requestWithFallback('/doctors', '/mock/doctors');\r\n  }\r\n\r\n  async createDoctor(doctorData) {\r\n    try {\r\n      return await this.request('/doctors', {\r\n        method: 'POST',\r\n        body: JSON.stringify(doctorData),\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to create doctor via API, using mock response');\r\n      // Return a mock response for development\r\n      return {\r\n        id: Date.now(),\r\n        ...doctorData,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateDoctor(id, doctorData) {\r\n    try {\r\n      return await this.request(`/doctors/${id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(doctorData),\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to update doctor via API, using mock response');\r\n      // Return a mock response for development\r\n      return {\r\n        id: id,\r\n        ...doctorData,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  async deleteDoctor(id) {\r\n    try {\r\n      return await this.request(`/doctors/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to delete doctor via API, using mock response');\r\n      // Return a mock response for development\r\n      return { message: 'Doctor deleted successfully' };\r\n    }\r\n  }\r\n\r\n  // Analytics\r\n  async getAnalytics() {\r\n    return this.requestWithFallback('/analytics', '/mock/analytics');\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    return this.request('/health');\r\n  }\r\n}\r\n\r\nexport default new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}